/*
 * Gradle file to build the Google Play Instant Plugin for Unity.
 * See https://docs.unity3d.com/Manual/CommandLineArguments.html
 */
buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }
}

/*
 * Project level variables.
 */
project.ext {
    // The Unity Editor executable path can be passed in from the command line:
    //   gradle -PunityExe=/path/to/unity/editor
    // If the path is not provided, a default path will be tried based on the OS.
    if (!project.hasProperty('unityExe')) {
        def osName = System.getProperty('os.name').toLowerCase();
        if (osName.contains('mac os x')) {
            unityExe = '/Applications/Unity/Unity.app/Contents/MacOS/Unity'
        } else if (osName.contains('windows')) {
            unityExe = 'C:\\Program Files\\Unity\\Editor\\Unity.exe'
        } else if (os_name.contains('linux')) {
            unityExe = '/opt/Unity/Editor/Unity'
        } else {
            throw new GradleException("Unsupported OS: $osName")
        }
    }
    def unityExeFound = (new File(unityExe)).exists();
    if (!unityExeFound) {
        throw new GradleException("Unity Editor executable not found: ${unityExe}")
    }

    // If the git project is located directly under the Assets folder, then we move up two
    // directories for the root of the build path. This avoids conflicts in a working Unity
    // project where we'd copy files and get duplicate class name build errors.
    def rootPath = file('.')
    def assetsPath = rootPath.getParentFile()
    if (assetsPath.getName() == 'Assets') {
        rootPath = assetsPath.getParentFile()
    }
    playInstantBuildPath = "${rootPath}/play-instant-build"
}

def copyFiles(projectPath, exclusions) {
    description 'Copies files into specified build staging location except for noted exclusions'
    copy {
        from 'LICENSE', 'README.md', 'CONTRIBUTING.md'
        from('GooglePlayInstant')
        {
            exclude 'Samples', '**/*.meta'
        }
        from('GooglePlayInstant/LoadingScreen/Textures') // Add meta files that we want to include.
        {
            include '**/*.meta'
            into "/LoadingScreen/Textures"
        }
        into "${projectPath}/Assets/GooglePlayInstant"
        exclude exclusions
    }
}

def exportUnityPackage(projectPath, packageFilePrefix) {
    description 'Creates a .unitypackage file with the specified prefix'

    // Extract the plugin version from a constant defined in code.
    def utilsFilePath = "${projectPath}/Assets/GooglePlayInstant/GooglePlayInstantUtils.cs"
    def utilsFileContents = new File(utilsFilePath).text
    def pluginVersion = (utilsFileContents =~ /PluginVersion = "(.+)";/)[0][1]

    def packageFileName = "${packageFilePrefix}-${pluginVersion}.unitypackage"
    def exportFileName = file(packageFileName).getPath()
    def logFile = file("${packageFileName}.log").getPath()
    def argv = [
            '-batchmode',
            '-projectPath',
            projectPath,
            '-logFile',
            logFile,
            '-exportPackage',
            'Assets',
            exportFileName,
            '-quit'
    ]
    exec {
        executable unityExe
        args argv
    }
}

task exportPlugin {
    description 'Creates and exports the Plugin as a .unitypackage'
    def buildPath = "${playInstantBuildPath}/plugin"
    doLast {
        copyFiles(buildPath, ['Tests'])
        exportUnityPackage(buildPath, 'google-play-instant-plugin')
    }
}

task exportSampleSphereBlast {
    description 'Creates and exports the Plugin unity package'
    def buildPath = "${playInstantBuildPath}/sphereblast"
    doFirst {
        copyFiles(buildPath, ['Tests'])
        copy {
            from 'GooglePlayInstant/Samples/SphereBlast'
            into "${buildPath}/Assets/SphereBlast"
        }
    }
    doLast {
        exportUnityPackage(buildPath, 'google-play-instant-sphereblast')
    }
}

task zipTestApp(type: Zip) {
   mustRunAfter 'buildTestApp'
   from playInstantBuildPath
   include "testapp.apk"
   archiveName "testapp.zip"
   destinationDir file(playInstantBuildPath)
}

task buildTestApp {
    description 'Creates the instant app test project, then builds a test app'
    def buildFunction = 'GooglePlayInstant.Samples.TestApp.Editor.TestAppBuilder.Build'
    def buildPath = "${playInstantBuildPath}/testapp"
    def logFile = file("testapp.log").getPath()
    def outputFile = file("${playInstantBuildPath}/testapp.apk");
        
    doFirst {
        copyFiles(buildPath, ['Tests'])
        copy {
            from 'GooglePlayInstant/Samples/TestApp'
            into "${buildPath}/Assets/TestApp"
        }
    }
    doLast {
        println "Building to ${outputFile}"
        def argv = [
            '-batchmode',
            '-noGraphics',
            '-projectPath',
            buildPath,
            '-logFile',
            logFile,
            '-buildTarget',
            'Android',
            '-outputFile',
            outputFile,
            '-executeMethod',
            buildFunction,
            '-quit'
        ]
        exec {
            executable unityExe
            args argv
        }
    }
}

task tests {
    description 'Runs unit tests with Unity test runner'
    def buildPath = "${playInstantBuildPath}/tests"
    doFirst {
        copyFiles(buildPath, [])
    }
    doLast {
        def argv = [
                '-batchmode',
                '-projectPath',
                buildPath,
                '-logFile',
                'test.log',
                '-runEditorTests'
        ]
        exec {
            executable unityExe
            args argv
        }
    }
}

task clean(type: Delete) {
    description 'Removes build artifacts'
    delete playInstantBuildPath
    delete fileTree('.') {
        include 'local.properties', 'local.properties.meta',
                '*.log', '*.log.meta',
                '*.unitypackage', '*.unitypackage.meta',
                'TestResults*.xml', 'TestResults*.xml.meta'
    }
}

task automatedTests {
    dependsOn 'exportPlugin'
    dependsOn 'tests'
    dependsOn 'buildTestApp'
    dependsOn 'zipTestApp'
}

project.defaultTasks = ['tests', 'exportPlugin']
