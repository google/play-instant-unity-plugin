/*
 * Gradle file to build the Google Play Instant Plugin for Unity.
 * See https://docs.unity3d.com/Manual/CommandLineArguments.html
 */
buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }
}

/*
 * Project level variables.
 */
project.ext {
    // The Unity Editor executable path can be passed in from the command line:
    //   gradle -PunityExe=/path/to/unity/editor
    // If the path is not provided, a default path will be tried based on the OS.
    if (!project.hasProperty('unityExe')) {
        def osName = System.getProperty('os.name').toLowerCase();
        if (osName.contains('mac os x')) {
            unityExe = '/Applications/Unity/Unity.app/Contents/MacOS/Unity'
        } else if (osName.contains('windows')) {
            unityExe = 'C:\\Program Files\\Unity\\Editor\\Unity.exe'
        } else if (os_name.contains('linux')) {
            unityExe = '/opt/Unity/Editor/Unity'
        } else {
            throw new GradleException("Unsupported OS: $osName")
        }
    }
    def unityExeFound = (new File(unityExe)).exists();
    if (!unityExeFound) {
        throw new GradleException("Unity Editor executable not found: ${unityExe}")
    }

    // If the git project is located directly under the Assets folder, then we move up two
    // directories for the root of the build path. This avoids conflicts in a working Unity
    // project where we'd copy files and get duplicate class name build errors.
    def rootPath = file('.')
    def assetsPath = rootPath.getParentFile()
    if (assetsPath.getName() == 'Assets') {
        rootPath = assetsPath.getParentFile()
    }
    playInstantBuildPath = "${rootPath}/play-instant-build"
}

def copyFiles(def projectPath, def exclusions) {
    description 'Copies files into specified build staging location except for noted exclusions'
    copy {
        from 'LICENSE', 'LICENSE.meta'
        from 'README.md', 'README.md.meta'
        from 'CONTRIBUTING.md', 'CONTRIBUTING.md.meta'
        from('GooglePlayInstant')
        {
            exclude 'Samples'
        }
        into "${projectPath}/Assets/GooglePlayInstant"
        exclude exclusions
    }
    copy {
        from 'GooglePlayInstant.meta'
        into "${projectPath}/Assets"
    }
}

def buildApp(def projectPath, def buildMethod, def logFile, def outputFile) {
    description 'Calls Unity on the command line to build the specified app'
    println "Building app: ${outputFile}"
    def argv = [
        '-batchmode',
        '-nographics',
        '-buildTarget',
        'Android',
        '-projectPath',
        projectPath,
        '-executeMethod',
        buildMethod,
        '-logFile',
        logFile,
        '-outputFile',
        outputFile,
        '-quit'
    ]
    exec {
        executable unityExe
        args argv
    }
}

task exportPlugin {
    description 'Creates and exports the Plugin as a .unitypackage'
    def buildPath = "${playInstantBuildPath}/plugin"
    doFirst {
        copyFiles(buildPath, ['Tests'])
    }

    doLast {
        def utilsFilePath = "${buildPath}/Assets/GooglePlayInstant/GooglePlayInstantUtils.cs"
        def utilsFileContents = new File(utilsFilePath).text
        def pluginVersion = (utilsFileContents =~ /PluginVersion = "(.+)";/)[0][1]
        def packageFileName = "google-play-instant-plugin-${pluginVersion}.unitypackage"
        def exportFileName = file(packageFileName).getPath()
        def logFile = file("${packageFileName}.log").getPath()
        def argv = [
                '-batchmode',
                '-nographics',
                '-projectPath',
                buildPath,
                '-logFile',
                logFile,
                '-exportPackage',
                'Assets/GooglePlayInstant',
                exportFileName,
                '-quit'
        ]
        exec {
            executable unityExe
            args argv
        }
    }
}

task zipTestApp(type: Zip) {
   mustRunAfter 'buildTestApp'
   from playInstantBuildPath
   include "testapp.apk"
   archiveName "testapp.zip"
   destinationDir file(playInstantBuildPath)
}

task buildTestApp {
    description 'Creates the instant app test project, then builds a test app'
    def buildFunction = 'GooglePlayInstant.Samples.TestApp.Editor.TestAppBuilder.Build'
    def buildPath = "${playInstantBuildPath}/testapp"
    def logFile = file("testapp.log").getPath()
    def outputFile = file("${playInstantBuildPath}/testapp.apk");
        
    doFirst {
        copyFiles(buildPath, ['Tests'])
        copy {
            from 'GooglePlayInstant/Samples/TestApp'
            into "${buildPath}/Assets/TestApp"
        }
    }
    doLast {
        buildApp(buildPath, buildFunction, logFile, outputFile)
    }
}

task buildSphereBlastApp {
    description 'Builds the SphereBlast sample as an instant app'
    def buildFunction = 'GooglePlayInstant.Samples.SphereBlast.Editor.SphereBlastBuilder.Build'
    def buildPath = "${playInstantBuildPath}/sphereblastapp"
    def logFile = file("sphereblastapp.log").getPath()
    def outputFile = file("${playInstantBuildPath}/sphereblast.apk");

    doFirst {
        copyFiles(buildPath, ['Tests'])
        copy {
            from 'GooglePlayInstant/Samples/SphereBlast'
            into "${buildPath}/Assets/SphereBlast"
        }
    }
    doLast {
        buildApp(buildPath, buildFunction, logFile, outputFile)
    }
}

task tests {
    description 'Runs unit tests with Unity test runner'
    def buildPath = "${playInstantBuildPath}/tests"
    doFirst {
        copyFiles(buildPath, [])
    }
    doLast {
        def argv = [
                '-batchmode',
                '-projectPath',
                buildPath,
                '-logFile',
                'test.log',
                '-runEditorTests'
        ]
        exec {
            executable unityExe
            args argv
        }
    }
}

task clean(type: Delete) {
    description 'Removes build artifacts'
    delete playInstantBuildPath
    delete fileTree('.') {
        include 'local.properties', 'local.properties.meta',
                '*.log', '*.log.meta',
                '*.unitypackage', '*.unitypackage.meta',
                'TestResults*.xml', 'TestResults*.xml.meta'
    }
}

task automatedTests {
    dependsOn 'exportPlugin'
    dependsOn 'tests'
    dependsOn 'buildTestApp'
    dependsOn 'zipTestApp'
    dependsOn 'buildSphereBlastApp'
}

project.defaultTasks = ['tests', 'exportPlugin']
